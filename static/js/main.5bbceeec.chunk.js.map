{"version":3,"sources":["serviceWorker.js","component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundary.js","container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","map","users","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACtB,OACC,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,YACrB,6BACA,4BAAKC,GACL,2BAAIC,MCaSI,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEAA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCGJU,EAbG,SAAC,GAAiC,EAA/BC,YAAgC,IAApBC,EAAmB,EAAnBA,aAChC,OACC,yBAAKX,UAAU,OACZ,2BACHA,UAAU,mCACVY,KAAK,SACLC,YAAY,aACZC,SAAUH,MCCGI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCmBEC,G,wDArBd,WAAaN,GAAQ,IAAD,8BACnB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHQ,E,8DAQFC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAK5B,OAAIG,KAAKJ,MAAMC,SACP,4CAEDG,KAAKX,MAAMK,a,GAlBSQ,cC8CbC,E,kDAtCd,aAAe,IAAD,8BACb,gBAcDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAd1C,EAAKZ,MAAQ,CACVnB,OAAQ,GACR6B,YAAY,IAJF,E,gEAQO,IAAD,OACnBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA/B,GAAK,OAAI,EAAKsB,SAAS,CAAExB,OAAQE,S,+BAQ9B,IAAD,EACuBqB,KAAKJ,MAA5BnB,EADA,EACAA,OAAO6B,EADP,EACOA,YACTO,EAAiBpC,EAAOqC,QAAO,SAAAC,GACrC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASX,EAAYU,kBAErD,OAAQvC,EAAOyC,OAEd,yBAAK7C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQoC,OAPC,wBAAIxC,UAAU,MAAd,e,GAzBR6B,aCFlBiB,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SP4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.5bbceeec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Card = ({id,name,email}) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?10x10`}/>\t\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t); \r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";   \r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t{\r\n\t\trobots.map((users,i) => {\r\n\t\treturn (<Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}/>\r\n\t\t);\r\n\t\t}\r\n\t\t)\r\n\t\t}\t\t\t\r\n\t    </div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield,searchChange }) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t    <input \r\n\t\tclassName=\"pa3 be b--green bg-lightest-blue\" \r\n\t\ttype=\"search\" \r\n\t\tplaceholder=\"Search Box\" \r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\r\n componentDidCatch(error, info) {\r\n \tthis.setState({ hasError : true })\r\n }\r\n\r\n\r\nrender() {\r\n\tif (this.state.hasError) {\r\n\t\treturn <h1>OOppss......</h1>\r\n\t}\r\n\treturn this.props.children\r\n}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from \"react\";\r\nimport CardList from \"../component/CardList\";\r\nimport SearchBox from \"../component/SearchBox\";\r\nimport Scroll from \"../component/Scroll\";\r\nimport \"./App.css\"\r\nimport ErrorBoundary from \"../component/ErrorBoundary\";\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n    \trobots: [],\r\n\t    searchField:''\r\n\t  }\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({ robots: users}));\r\n\t}\r\n\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchField: event.target.value })\r\n\t\t}\r\n\r\n\trender() {\r\n\t\tconst { robots,searchField } = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t})\r\n\t\treturn !robots.length ? <h1 className=\"tc\">Loading</h1> :\r\n\t\t (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t  <h1 className=\"f1\">Robofriends</h1>\r\n\t\t\t  <SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t  <Scroll>\r\n\t\t\t   <ErrorBoundary>\r\n\t\t\t    <CardList robots={filteredRobots}/>\r\n\t\t\t   </ErrorBoundary> \r\n\t\t\t  </Scroll>\r\n\t\t\t</div>\r\n\t\t)\r\n\t\t}\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from \"./container/App\";\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}